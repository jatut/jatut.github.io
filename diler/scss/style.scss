/*###
Bootstrap Stuff to make this pen work
###*/

/* Attention: this is a copy of some bootstrap vaiables, CSS and mixins -> not needed on production code if bootstrap is used */

/* Copied Bootstrap Mixins */
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num != null and $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

$grid-gutter-width: 1.875rem;

/* Copied Bootstrap CSS */

* {
  box-sizing: border-box;
}

.container-fluid {
  padding-right: $grid-gutter-width / 2;
  padding-left: $grid-gutter-width / 2;
  margin-right: auto;
  margin-left: auto;
}


/*###
Aditional Variables
###*/

/* -> Those lines have to be added to _variables.scss */
$hex-grid-gutter-width: 20px;
/* adjust the grid gutter vertically */
/* this depens on the value choosen for the gutter.
unfortunatelly this has to be done by hand until the gutters look "right"*/
$hex-grid-gutter-offset: 2px;

//here you can set a different gutter for the hexagon grid. Do not use % values.
$hex-grid-gutter-cols: 12; //the maximum amount of cols to generate

/* Breakpoints
You can set the same as the bootstrap grid ones but you can also have different ones*/
$hex-grid-breakpoints: (
  xxs: 0, // <- this was added
  xs: 350px, //<- this was changed from 0 to 350px
  sm: 544px,
  md: 768px,
  lg: 992px,
  xl: 1200px
) !default;
@include _assert-ascending($hex-grid-breakpoints, "$hex-grid-breakpoints");

/* Z-index for links on hexagons*/
$z-index-hex-links: 10;

/* ###
Here comes the actual hexagon grid code
### */

$hex-aspect-ratio: .866025; // This is a constant. Do not change!

/* It turned out that the SVG polygon I am using for the hexagon is not perfectly matching an equal sided hexagon. Its slightly distorted and therefore has a different aspect ratio. Please remove this variable override if you use perfect hexagons.*/
$hex-aspect-ratio: (310/350); //adapted aspect ratio for our distorted SVG path


/* Calculate the hex gutters */
$hex-leftright-padding: $hex-grid-gutter-width / 2;
$hex-topbottom-padding: ($hex-grid-gutter-width / 2) * $hex-aspect-ratio;

@mixin generate-hex-grid-base(){
  /*== Grid CSS 1: Basic CSS that is independet of number of columns */

  .hex-grid{
    overflow: hidden;
    // Around the the grid, compensate for the padding within .hex-cols
    margin: #{-$hex-topbottom-padding} #{-$hex-topbottom-padding};

    .hex-row{
      display:table; //clear floating of .hex
      margin-top: $hex-grid-gutter-offset; //neutralice offset margins on the .hex-cols
    }
    .hex-col{
      float:left;
      position: relative;
      margin-top: -$hex-grid-gutter-offset;
    }
    .hex{
      position: absolute;
      top:0;
      /* Offset position within the col-container */
      left: (100% / 6);
      right: (100% / 6);
      height: 0;
      padding: 0;
      padding-bottom: ((100% / 6 * 4) * $hex-aspect-ratio); //because of the left and right offset our base is 66.6% instead of 100%
    }
    .hex-inner {
      padding: $hex-topbottom-padding $hex-leftright-padding;
    }
  }
}

@mixin generate-hex-grid-cols($breakpoint-name:"",$breakpoint-width:0,$hex-grid-cols:0){

  /* This allows us to initialize the mobile first case without col-* suffix  */
  $grid-class-suffix: "";

  @if $breakpoint-name == ""{
    $hex-grid-cols: 1;
    $grid-class-suffix: "";
  }
  @else {
    $grid-class-suffix: -#{$breakpoint-name}-#{$hex-grid-cols};
  }

  /*= Math that changes depending on the amount of cols */

  /* calculation of the amount of hexagons on first and second row */
  $hex-grid-cols-first-row: ceil($hex-grid-cols / 2);
  $hex-grid-cols-second-row: floor($hex-grid-cols / 2);

  /* using modulo to find out if total amount is odd or even */
  $hex-grid-cols-is-odd: $hex-grid-cols % 2;

  /* Calculate the position of the extra offset margins*/
  $offset-left-nth: $hex-grid-cols-first-row + 1;
  $offset-right-nth:0; //initialize
  @if $hex-grid-cols-is-odd == 1 { //odd case
    $offset-right-nth: $hex-grid-cols;
  }
  @else if $hex-grid-cols-is-odd == 0 { //even case
    $offset-right-nth: $hex-grid-cols-first-row;
  }

  /* Amount of grid dividers in one row. Each .hex-col is divided into 6 subcolumns */
  $hex-grid-dividers: 3 + ($hex-grid-cols * 3);

  /* calculation of the divider width
  The divider with is used to find out the width of the .hex-row wrapper relative to the Bootstrap .container.
  All dividers summed together are always > 100% because two dividers are in the invisible space on the left and right. e.g 120% in case of 12 dividers*/
  $hex-row-divider-width: 100% / ($hex-grid-dividers - 2);
  $hex-row-width: $hex-row-divider-width * $hex-grid-dividers;  //e.g 12x10%=120%

  /* .hex-col width within the .hex-row.
  All col width within a row sum up to 100% because we change the reference system here. */
  $hex-col-divider-width: (100% / $hex-grid-dividers);
  $hex-col-width: $hex-col-divider-width * 6;


  /*== Grid CSS 2: Mobile first and col 1 case*/
  @media(min-width:$breakpoint-width){
    .hex-grid#{$grid-class-suffix}{

      .hex-row{
        width: $hex-row-width; //this value includes gutters
        margin-left: -($hex-row-divider-width) ;
      }

      .hex-col{
        width: $hex-col-width;
        padding-bottom: ($hex-col-width / 1.5) * $hex-aspect-ratio;
      }
    }
  }
  /*== Grid CSS 3: More than one colum case */
  @media(min-width:$breakpoint-width) {
    @if $hex-grid-cols > 1{
    .hex-grid#{$grid-class-suffix}{
      .hex-row{
          padding-bottom: (2 * $hex-row-divider-width * $hex-aspect-ratio); //make the last row fully visible although there is overflow hidden
        }
        .hex-col{
          padding-bottom: ($hex-col-width / 3) * $hex-aspect-ratio; // We just need half the height of the hexagon ("/6 * 4 / 2" becomes "/3")

          /* Extra offset margins (no margin if just one grid col)*/
          /* The first rule is durty, but i need an stronger selector on each breakpoint */

          &:nth-child(1n+1){
            margin-left: 0;
            margin-right:0;
          }
          &:nth-child(#{$hex-grid-cols}n + #{$offset-left-nth}) {
            margin-left: $hex-col-width / 2;
          }
          &:nth-child(#{$hex-grid-cols}n + #{$offset-right-nth}) {
            margin-right: $hex-col-width / 2;
          }
        }
      }
    }
  }
}

/*###
Call the mixins to generate the grid
###*/

/* Include for common css*/
@include generate-hex-grid-base();

//Initialization without arguments. Not elegant but....
@include generate-hex-grid-cols();

@each $breakpoint-name in map-keys($hex-grid-breakpoints) {
  $breakpoint-width: map-get($hex-grid-breakpoints, $breakpoint-name);
  @for $i from 1 to $hex-grid-gutter-cols {
    @include generate-hex-grid-cols($breakpoint-name,$breakpoint-width,$i);
  }
}

/* Iterate over include to get cols*/
/*@for $i from 0 to $hex-grid-gutter-cols {
  @include generate-hex-grid-cols($hex-grid-breakpoint,$i);
}*/


/*###
Debug colors
### */

$debug-colors: "hide"; //central switch to show or hide for your convenience

@if $debug-colors == "show" {
  .container-fluid{
    &:before,
    &:after{
      display:block;
      width: 1px;
      height: 100%;
      position: fixed;
      top: 0;
      content: " ";
      background: rgb(91,155,213);
    }
    &:before{
       left: $grid-gutter-width / 2;
    }
    &:after{
       right: $grid-gutter-width / 2;
    }
  }

  .hex-col{
    //temporarily colors
    background:rgba(255,237,1,0.3);
  }

  .hex{
      background:rgba(255,192,0,0.3);
      color: rgb(197,90,17);
  }

  .hex-boxlink {
     background: rgba(180,0,0,0.3);
  }

  .theend{
    background:rgba(255,20,0,0.3);
  }
}

/*###
Formatting the hexagons -> idependent of grid
### */

.hex {

  .hex-content{
    color: white;
    position: absolute;
    /* centring trick*/
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    -webkit-transform: translate(-50%, -50%);
    //width: 100%;
  }

  .hex-boxlink{
    position: absolute;
    display:block;
    top: $hex-topbottom-padding;
    bottom: $hex-topbottom-padding;
    left: $hex-leftright-padding;
    right: $hex-leftright-padding;
    border-radius: 100%;
    z-index:$z-index-hex-links;
  }

  .hex-inner {
    position: absolute;
    top:0;
    left:0;
    width:100%;
    height:100%;
  }

  .hex-bg {
    fill:#6993be;
  }
}
